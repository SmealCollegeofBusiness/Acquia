  # Example Acquia CI configuration.
  #
  # The configuration files in the .acquia directory will cover ORCA integration for most packages almost
  # without modification. Use as follows:
  #
  # 1. Copy the .acquia directory to your package root:
  #
  #    $ cp -R example/.acquia ../my_package/.acquia
  #
  # 2. Change the ENV values for your package. No other changes are
  #    strictly necessary for a basic integration.
  #
  # 3. Review the other comments in the file for additional configuration options.
  #
  # 4. Strip the (now unnecessary) comments:
  #
  #    $ sed -i'.bak' -e '/^[[:blank:]]*#/d;s/#.*//' Dockerfile.ci && rm Dockerfile.ci.bak
  #
  # 5. Make necessary changes in /my_package/.acquia/pipeline.yaml
  #
  # For advanced needs,
  # @see https://github.com/acquia/orca/blob/main/docs/advanced-usage.md

  # The image is built from https://github.com/acquia/devops-orca-container
  ARG BASE_IMAGE=devops-orca-container:latest

  # Jfrog is used by default in REPO_LOCATION
  # Solving dockerhub rate limiting
  # and improving security scanning
  ARG REPO_LOCATION

  FROM ${REPO_LOCATION}${BASE_IMAGE}

  # Specify the version of ORCA to use. Use dev-master to track the latest
  # release, dev-develop to track Dev/HEAD, or any other Composer version
  # string.
  # @see https://getcomposer.org/doc/articles/versions.md
  ARG ORCA_VERSION=^3

  ENV CI=true
  # Checks ACQUIACI in custom before_install.sh file.
  ENV ACQUIACI=TRUE
  ENV CHROMEDRIVER_VERSION 93.0.4577.63
  ENV CHROMEDRIVER_DIR /chromedriver
  ENV DEBIAN_FRONTEND=noninteractive
  #Set the working directory, usually acquia/project_name
  ENV CI_WORKSPACE=/acquia/acquia_contenthub
  # Provide your package's name.
  ENV ORCA_SUT_NAME=drupal/acquia_contenthub
  # Specify the name of the nearest Git version branch, e.g., 1.x or 8.x-1.x.
  # This may be the destination branch of a pull request or the nearest
  # ancestor of a topic branch.
  ENV ORCA_SUT_BRANCH=3.x

  # If your package isn't in in ORCA's packages.yml or conflicts with details
  # that are, you can modify the active packages configuration at runtime by
  # uncommenting the following line and specifying your own alter file.
  # @see https://github.com/acquia/orca/blob/master/docs/advanced-usage.md#ORCA_PACKAGES_CONFIG_ALTER
  # If your package is a Drupal installation profile, uncomment the following
  # line and specify its machine name.
  # @see https://github.com/acquia/orca/blob/master/docs/advanced-usage.md#ORCA_FIXTURE_PROFILE
  #ENV ORCA_FIXTURE_PROFILE=example
  # If your package is a Composer project template or requires a different
  # one to test with, uncomment the following line and specify its Packagist
  # name. This is recommended if your package is not meant to support Acquia
  # CMS, which is included in acquia/drupal-recommended-project.
  # @see https://github.com/acquia/orca/blob/main/docs/advanced-usage.md#ORCA_FIXTURE_PROJECT_TEMPLATE
  # @see https://github.com/acquia/orca/blob/main/docs/faq.md#why-do-i-get-version-conflicts-with-drupalacquia_cms
  # - ORCA_FIXTURE_PROJECT_TEMPLATE=acquia/drupal-minimal-project
  #
  # Change the PHP Code Sniffer standard used for static analysis. Acceptable
  # values are "AcquiaPHP", "AcquiaDrupalStrict", and
  # "AcquiaDrupalTransitional". Defaults to "AcquiaDrupalTransitional".
  # @see https://github.com/acquia/orca/blob/main/docs/advanced-usage.md#ORCA_PHPCS_STANDARD
  #ENV ORCA_PHPCS_STANDARD=AcquiaDrupalTransitional

  # Increase PHP memory limit to avoid memory exhausted issue during site install.
  RUN echo 'memory_limit = 2048M' >> /usr/local/etc/php/conf.d/docker-php-memlimit.ini

  # Installing php8.1 version.
  RUN apt-get update && apt-get install -y php8.1 php8.1-cli php8.1-common \
      php8.1-zip php8.1-gd php8.1-mbstring php8.1-tokenizer \
      php8.1-curl php8.1-xml php8.1-bcmath php8.1-xml \
      php8.1-intl php8.1-sqlite3 php8.1-mysql \
      && apt-get clean && rm -rf /var/lib/apt/lists/*

  #
  # Set Working Directory.
  #
  WORKDIR $CI_WORKSPACE

  COPY composer.* ./

  COPY . ./
