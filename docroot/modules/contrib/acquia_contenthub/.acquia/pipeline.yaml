# Example Acquia CI configuration.
#
# The configuration files in the .acquia directory will cover ORCA integration for most packages almost
# without modification. Use as follows:
#
# 1. Copy the .acquia directory to your package root:
#
#    $ cp -R example/.acquia ../my_package/.acquia
#
# 2. Change the team and service values for your package and change environment_image.build_args.secrets as necessary.
#    No other changes are strictly necessary for a basic integration.
#
# 3. Review the other comments in the file for additional configuration options.
#
# 4. Strip the (now unnecessary) comments:
#
#    $ sed -i'.bak' -e '/^[[:blank:]]*#/d;s/#.*//' pipeline.yaml && rm pipeline.yaml.bak
#
# 5. Make necessary changes in /my_package/.acquia/Dockerfile.ci
#
# For advanced needs,
# @see https://github.com/acquia/orca/blob/main/docs/advanced-usage.md

---
type: default
team: LCH
service: acquia_contenthub

# The environment container image is used to prepare code versions
# and tooling for tests during pre, post and build stages.
environment_image:
  file: ".acquia/Dockerfile.ci"
  context: "."
  # The build_matrix is only required for testing multiple versions.
  build_matrix:
    base_images:
      - php:7.4-cli-buster

_orca_steps: &orca_steps
  - steps:
      - |
        cd $CI_WORKSPACE
        ../orca/bin/ci/before_install.sh && error=false || error=true
        ./tests/travis/before_install.sh && error=false || error=true
        # Switch to PHP8. The version will depend on the version(s) installed in your Dockerfile.
        # The template provides version 8.0.
        if [ "$JENKINS_PHP_VERSION" = 8.0 ]; then
          update-alternatives --install /usr/local/bin/php php /usr/bin/php8.0 80
          php -v
        fi
        # Create the test fixture and place the SUT.
        ../orca/bin/ci/install.sh && error=false || error=true
        ./tests/travis/install.sh && error=false || error=true
        # Display details about the fixture.
        ../orca/bin/ci/before_script.sh && error=false || error=true
        # Run the test script.
        ../orca/bin/ci/script.sh && error=false || error=true
        ./tests/travis/script.sh && error=false || error=true
        ../orca/bin/ci/before_cache.sh && error=false || error=true
        if [ "$error" = "true" ]; then
          echo "Running after failure";
          ../orca/bin/ci/after_failure.sh;
          if [ "$ALLOWED_FAILURE" = "true" ]; then
            exit 0;
          else
            exit 1;
          fi
        else
          echo "Running after success";
          ../orca/bin/ci/after_success.sh;
        fi

# -- Continuous Integration --
# Pre-build runs after building the environment image, and relies on it to
# run its sub-stages' steps inside of the environment container.
pre_build:
  static_code_analysis:
    - args: --env ORCA_JOB=STATIC_CODE_ANALYSIS
      <<: *orca_steps
  integrated_test_on_oldest_supported:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_OLDEST_SUPPORTED
      <<: *orca_steps
  integrated_test_on_latest_lts:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_LATEST_LTS
      <<: *orca_steps
  integrated_test_on_prev_minor:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_PREVIOUS_MINOR
      <<: *orca_steps
  integrated_test_from_prev_minor:
    - args: --env ORCA_JOB=INTEGRATED_UPGRADE_TEST_FROM_PREVIOUS_MINOR
      <<: *orca_steps
  isolated_test_on_current:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_CURRENT
      <<: *orca_steps
  isolated_test_on_current_php8:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_CURRENT --env JENKINS_PHP_VERSION=8.0
      <<: *orca_steps
  integrated_test_on_current:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_CURRENT
      <<: *orca_steps
  integrated_test_to_next_minor:
    - args: --env ORCA_JOB=INTEGRATED_UPGRADE_TEST_TO_NEXT_MINOR
      <<: *orca_steps
  integrated_test_to_next_minor_dev:
    - args: --env ORCA_JOB=INTEGRATED_UPGRADE_TEST_TO_NEXT_MINOR_DEV --env ALLOWED_FAILURE=true
      <<: *orca_steps
  isolated_test_on_current_dev:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_CURRENT_DEV
      <<: *orca_steps
  integrated_test_on_current_dev:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_CURRENT_DEV
      <<: *orca_steps
  loose_deprecated_code_scan:
    - args: --env ORCA_JOB=LOOSE_DEPRECATED_CODE_SCAN --env ALLOWED_FAILURE=true
      <<: *orca_steps
  strict_deprecated_code_scan:
    - args: --env ORCA_JOB=STRICT_DEPRECATED_CODE_SCAN
      <<: *orca_steps
  deprecated_code_scan_w_contrib:
    - args: --env ORCA_JOB=DEPRECATED_CODE_SCAN_W_CONTRIB --env ALLOWED_FAILURE=true
      <<: *orca_steps
  isolated_test_on_next_minor:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MINOR
      <<: *orca_steps
  integrated_test_on_next_minor:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_NEXT_MINOR
      <<: *orca_steps
  isolated_test_on_next_minor_dev:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MINOR_DEV --env ALLOWED_FAILURE=true
      <<: *orca_steps
  integrated_test_on_next_minor_dev:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_NEXT_MINOR_DEV --env ALLOWED_FAILURE=true
      <<: *orca_steps
  # Uncomment the following four jobs to enable the corresponding tests once
  # the next major version of Drupal core has an alpha release or earlier.
  # Until then it's wasteful to use CI jobs on them, even if they exit early.
  # isolated_test_on_next_major_latest_minor_beta_later
  #   - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_BETA_OR_LATER
  #     <<: *orca_steps
  # integrated_test_on_next_major_latest_minor_beta_later
  #   - args: --env ORCA_JOB=INTEGRATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_BETA_OR_LATER
  #     <<: *orca_steps
  # isolated_test_on_next_major_latest_minor_dev
  #   - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_DEV
  #     <<: *orca_steps
  # integrated_test_on_next_major_latest_minor_dev
  #   - args: --env ORCA_JOB=INTEGRATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_DEV
  #     <<: *orca_steps
  isolated_upgrade_test_to_next_major_beta_later:
    - args: --env ORCA_JOB=ISOLATED_UPGRADE_TEST_TO_NEXT_MAJOR_BETA_OR_LATER
      <<: *orca_steps
  isolated_upgrade_test_to_next_major_dev:
    - args: --env ORCA_JOB=ISOLATED_UPGRADE_TEST_TO_NEXT_MAJOR_DEV --env ALLOWED_FAILURE=true
      <<: *orca_steps

  security_composition_analysis:
    required: true

# -- Slack Bot Integration --
notify:
  channel: ch-modules-eng
  on_success: change
  on_failure: always
